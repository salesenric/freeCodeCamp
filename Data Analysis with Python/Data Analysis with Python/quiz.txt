1. Which of the following is not part of Data Analysis?
[ ] Building statistical models and data visualizations.
[X] Picking a desired conclusion for the analysis.
[ ] Fixing incorrect values and removing invalid data.
[ ] Transforming data into an appropriate data structure.

2. What does the shape of our dataframe tell us?
[ ] The size in gigabytes the dataframe we loaded into memory is.
[X] How many rows and columns our dataframe has.
[ ] How many rows the source data had before loading.
[ ] How many columns the source data had before loading.

3. What does the loc method allow you to do?
[ ] Retrieve a subset of rows and columns by supplying integer-location arguments.
[X] Access a group of rows and columns by supplying label(s) arguments.
[ ] Returns the first n rows based on the integer argument supplied.

4. What is not allowed in a Jupyter Notebook's cell?
[ ] Markdown
[ ] Python code
[X] An Excel sheet

5. What are the three main types of Jupyter Notebook Cell?
[ ] Code, Markdown, and Python
[X] Code, Markdown, and Raw
[ ] Markdown, Python, and Raw

6. What kind of data can you import and work with in a Jupyter Notebook?
[ ] Excel files.
[ ] CSV files.
[ ] XML files.
[ ] Data from an API.
[X] All of the above.

7. Why is Numpy an important, but unpopular Python library?
[X] Often you won't work directly with Numpy.
[ ] It is extremely slow.
[ ] Working with Numpy is difficult.

8. About how much memory does the integer 5 consume in plain Python?
[ ] 32 bits
[X] 20 bytes
[ ] 16 bytes
[ ] 8 bits

9. What will the following code print out?

A = np.array([
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i']
])
print(A[:, :2])

[ ] [['a' 'b']]
[ ] [['b' 'c']
    ['e' 'f']
    ['h' 'i']]
[X] [['a' 'b']
    ['d' 'e']
    ['g' 'h']]

10. What is the value of a after you run the following code?

a = np.arange(5)
a + 20

[ ] [20, 21, 22, 24, 24]
[X] [0, 1, 2, 3, 4]
[ ] [25, 26, 27, 28, 29]

11. What will the following code print out?

a = np.arange(5)
print(a <= 3)

[ ] [False, False, False, False, True]
[ ] [5]
[ ] [0, 1, 2, 3]
[X] [True, True, True, True, False]

12. What is the relationship between size of objects (such as lists and datatypes) in memory in Python's standard library and the NumPy library? Knowing this, what are the implications for performance?
[ ] Standard Python objects take up much more memory to store than NumPy objects; operations on comparable standard Python and NumPy objects complete in roughly the same time.
[ ] NumPy objects take up much more memory than standard Python objects; operations on NumPy objects complete very quickly compared to comparable objects in standard Python.
[ ] NumPy objects take up much less memory than Standard Python objects; operations on Standard Python objects complete very quickly compared to comparable objects on NumPy Object.
[X] Standard Python objects take up more memory than NumPy objects; operations on NumPy objects complete very quickly compared to comparable objects in standard Python.

13. What will the following code print out?

import pandas as pd
certificates_earned = pd.Series(
    [8, 2, 5, 6],
    index=['Tom', 'Kris', 'Ahmad', 'Beau']
)
print(certificates_earned)

[X] Tom 8 Kris 2 Ahmad 5 Beau 6 dtype: int64
[ ] Kris 2 Ahmad 5 Beau 6 Tom 8 dtype: int64
[ ] Tom 8 Kris 2 Ahmad 5 Beau 6 Name: certificates_earned dtype: int64

14. What will the following code print out?

import pandas as pd
certificates_earned = pd.Series(
    [8, 2, 5, 6],
    index=['Tom', 'Kris', 'Ahmad', 'Beau']
)
print(certificates_earned[certificates_earned > 5])

[ ] 
Tom      True
Kris     False
Ahmad    False
Beau     True
dtype: int64

[ ] 
Tom      8
Ahmad    5
Beau     6
dtype: int64

[X] 
Tom      8
Beau     6
dtype: int64

15. What will the following code print out?

import pandas as pd
certificates_earned = pd.DataFrame({
    'Certificates': [8, 2, 5, 6],
    'Time (in months)': [16, 5, 9, 12]
})
certificates_earned.index = ['Tom', 'Kris', 'Ahmad', 'Beau']
print(certificates_earned.iloc[2])

[ ] 
Tom      16
Kris      5
Ahmad     9
Beau     12
Name: Time (in months), dtype: int64

[ ] 
Certificates         6
Time (in months)    12
Name: Beau, dtype: int64

[X] 
Certificates        5
Time (in months)    9
Name: Ahmad, dtype: int64

16. What will the following code print out?

import pandas as pd
certificates_earned = pd.DataFrame({
    'Certificates': [8, 2, 5, 6],
    'Time (in months)': [16, 5, 9, 12]
})
names = ['Tom', 'Kris', 'Ahmad', 'Beau']
certificates_earned.index = names
longest_streak = pd.Series([13, 11, 9, 7], index=names)
certificates_earned['Longest streak'] = longest_streak
print(certificates_earned)

[ ] 
Tom      13
Kris     11
Ahmad     9
Beau      7
Name: Longest streak, dtype: int64

[X] 
      Certificates  Time (in months)  Longest streak
Tom               8                16              13
Kris              2                 5              11
Ahmad             5                 9               9
Beau              6                12               7

[ ] 
      Certificates   Longest streak
Tom               8               13
Kris              2               11
Ahmad             5                9
Beau              6                7

17. What code would add a "Certificates per month" column to the certificates_earned DataFrame like the one below?

      Certificates  Time (in months)  Certificates per month
Tom               8                16                    0.50
Kris              2                 5                    0.40
Ahmad             5                 9                    0.56
Beau              6                12                    0.50

[ ] 
certificates_earned['Certificates'] /
certificates_earned['Time (in months)']

[ ] 
certificates_earned['Certificates per month'] = round(
    certificates_earned['Certificates'] /
    certificates_earned['Time (in months)']
)

[X] 
certificates_earned['Certificates per month'] = round(
    certificates_earned['Certificates'] /
    certificates_earned['Time (in months)'], 2
)

18. What will the following code print out?

import pandas as pd
import numpy as np
s = pd.Series(['a', 3, np.nan, 1, np.nan])
print(s.notnull().sum())

[X] 3

[ ] 
0     True
1     True
2    False
3     True
4    False
dtype: bool

[ ] 
0    False
1    False
2     True
3    False
4     True
dtype: bool

19. What will the following code print out?

import pandas as pd
import numpy as np
s = pd.Series([np.nan, 1, 2, np.nan, 3])
s = s.fillna(method='ffill')
print(s)

[ ]
0    1.0
1    1.0
2    2.0
3    3.0
4    3.0
dtype: float64

[X]
0    NaN
1    1.0
2    2.0
3    2.0
4    3.0
dtype: float64

[ ] 
0    NaN
1    1.0
2    2.0
3    NaN
4    3.0
dtype: float64

20. The Python method .duplicated() returns a boolean Series for your DataFrame. True is the return value for rows that:

[ ] contain a duplicate, where the value for the row contains the first occurrence of that value.
[X] contain a duplicate, where the value for the row is at least the second occurrence of that value.
[ ] contain a duplicate, where the value for the row contains either the first or second occurrence.

21. When using Matplotlib's global API, what does the order of numbers mean here?

plt.subplot(1, 2, 1)

[ ] My figure will have one column, two rows, and I am going to start drawing in the first (left) plot.

[ ] I am going to start drawing in the first (left) plot, my figure will have two rows, and my figure will have one column.

[X] My figure will have one row, two columns, and I am going to start drawing in the first (left) plot.

22. Given a file named certificates.csv with these contents:

Name$Certificates$Time (in months)
Tom$8$16
Kris$2$5
Ahmad$5$9
Beau$6$12
Fill in the blanks for the missing arguments below:

import csv

with open(__A__, 'r') as fp:
    reader = csv.reader(fp, delimiter=__B__)
    next(reader)
    for index, values in enumerate(reader):
        name, certs_num, months_num = values
        print(f"{name} earned {__C__} certificates in {months_num} months")

[ ] 
A: 'certificates.csv'
B: '-'
C: values

[X] 
A: 'certificates.csv'
B: '$'
C: certs_num

[ ] 
A: 'certificates'
B: '$'
C: certs_num

23. How would you import the CSV file data.csv and store it in a DataFrame using the Pandas module?

[ ] 
import pandas as pd
df = pd.csv("data.csv")

[X] 
import pandas as pd
df = pd.read_csv("data.csv")

[ ] 
import pandas as pd
pd.read_csv("data.csv")

[ ] 
import pandas as pd
df = pd.csv_reader("data.csv")

24. What method does a Cursor instance have and what does it allow?

[ ] The Cursor instance has a .run() method which allows you to run SQL queries.
[ ] The Cursor instance has a .select() method which allows you to select records.
[X] The Cursor instance has an .execute() method which will receive SQL parameters to run against the database.

25. What Python library has the .read_html() method we can use for parsing HTML documents and extracting tables?

[ ] BeautifierSoupy
[ ] WebReader
[ ] HTTP-master
[X] Pandas

26. How do we define blocks of code in the body of functions in Python?

[ ] We use a set of curly braces, one on either side of each new block of our code.
[X] We use indentation, usually right-aligned 4 spaces.
[ ] We do not denote blocks of code.
[ ] We could use curly braces or indentation to denote blocks of code.

27. What is the main difference between lists and tuples in Python?

[X] Tuples are immutable.
[ ] Lists are ordered.
[ ] Tuples are unordered.

28. How would you iterate over and print the keys and values of a dictionary named user?

[ ] 
for key in user.items():
    print(key)

[ ] 
for key, value in user.all():
    print(key, value)
    print(value)

[X] 
for key, value in user.items():
    print(key, value)

[ ] 
for key, value in user
    print(key, value)
