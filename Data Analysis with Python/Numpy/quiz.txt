1. Why are Numpy arrays faster than regular Python lists?

[ ] Numpy does not perform type checking while iterating through objects.
[ ] Numpy uses fixed types.
[ ] Numpy uses contiguous memory.
[X] All of the above.

2. What will the following code print?

b = np.array([[1.0,2.0,3.0],[3.0,4.0,5.0]])
print(b)

[ ] 
[[1.0 2.0 3.0]
[3.0 4.0 5.0]]

[X] 
[[1. 2. 3.]
[3. 4. 5.]]

[ ] 
[[1. 3.]
[2. 4.]
[3. 5.]

3. What code would change the values in the 3rd column of both of the following Numpy arrays to 20?

a = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])

# Output:
# [[ 1  2  20  4  5]
# [ 6  7 20  9 10]]

[ ] a[:, 3] = 20
[ ] a[2, :] = 20
[X] a[:, 2] = 20
[ ] a[1, 2] = 20

4. What will the following code print?

a = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print(np.full_like(a, 100))

[ ] 
[[100 100 100 100 100]]

[X] 
[[100 100 100 100 100]
[100 100 100 100 100]]

[ ] 
[[ 1  2  3  4  5]
[ 6  7 20  9 10]]

5. What is another way to produce the following array?

[[0. 0. 0. 0. 0. 0. 0.]
[0. 1. 1. 1. 1. 1. 0.]
[0. 1. 1. 1. 1. 1. 0.]
[0. 1. 1. 5. 1. 1. 0.]
[0. 1. 1. 1. 1. 1. 0.]
[0. 1. 1. 1. 1. 1. 0.]
[0. 0. 0. 0. 0. 0. 0.]]

[ ] 
output = np.ones((7, 7))
z = np.zeros((5, 5))
z[2, 2] = 5
output[1:1, -1:-1] = z

[X] 
output = np.zeros((7,7))
z = np.ones((5, 5))
z[2, 2] = 5
output[1:-1, 1:-1] = z

[ ] 
output = np.ones((7, 7))
z = np.zeros((5, 5))
z[3, 3] = 5
output[1:-1, 1:-1] = z

6. What is the value of a after running the following code?

import numpy as np
a = np.array([1, 2, 3, 4, 5])
b = a
b[2] = 20

[ ] [1 2 3 4 5]
[X] [1 2 20 4 5]
[ ] [1 20 3 4 5]

7. What is the value of b after running the following code?

import numpy as np
a = np.array(([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))
b = np.max(a, axis=1).sum()

[ ] 10
[ ] 7
[ ] 5
[X] 15

8. What code would produce the following array?

[[1. 1.]
[1. 1.]
[1. 1.]
[1. 1.]]

[X] 
a = np.ones((2, 4))
b = a.reshape((4, 2))
print(b)

[ ] 
a = np.ones((2, 4))
b = a.reshape((2, 4))
print(b)

[ ] 
a = np.ones((2, 4))
b = a.reshape((8, 1))
print(b)

9. Given a file named data.txt with these contents:

29,97,32,100,45
15,88,5,75,22
What code would produce the following array?
[29. 32. 45. 15.  5. 22.]

[ ] 
filedata = np.genfromtxt('data.txt', delimiter=',')
output = np.any(filedata < 50)
print(output)

[ ] 
filedata = np.genfromtxt('data.txt', delimiter=',')
output = np.all(filedata < 50, axis=1)
print(output)

[X] 
filedata = np.genfromtxt('data.txt', delimiter=',')
output = filedata[filedata < 50]
print(output)
